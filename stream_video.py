# -*- coding: utf-8 -*-
"""
Created on Thu Nov 14 18:57:44 2019

@author: seraj
"""
import time
import cv2 
from flask import Flask, render_template, Response
import numpy as np
import face_recognition
app = Flask(__name__)

@app.route('/')
def index():
    """Video streaming home page."""
    return render_template('index.html')


def gen():
    """Video streaming generator function."""
    cap = cv2.VideoCapture(0)
    
    # Read until video is completed
    while(cap.isOpened()):
      # Capture frame-by-frame
        ret, img = cap.read()
        known_face_encodings = [[-8.58152732e-02,  1.23058856e-01,  1.18296426e-02, -6.78894296e-02,
        1.72001421e-02,  9.81814321e-03, -8.31371695e-02, -9.59379598e-02,
        1.85160458e-01, -1.09657779e-01,  2.48864591e-01,  9.01277140e-02,
       -2.13798687e-01, -1.44437537e-01,  5.26895374e-02,  1.20321780e-01,
       -1.81966364e-01, -8.24943334e-02, -1.08026773e-01, -1.10747874e-01,
        3.10977586e-02, -7.70515949e-03,  9.95475575e-02,  4.40644398e-02,
       -1.24304876e-01, -3.46334726e-01, -6.69605434e-02, -1.82005480e-01,
       -9.06316563e-05, -1.07680693e-01, -8.25775191e-02, -1.24615408e-03,
       -1.65278256e-01, -1.00504369e-01,  1.71370469e-02, -1.55583005e-02,
        1.30908908e-02,  1.52958622e-02,  2.01861933e-01,  3.05777714e-02,
       -1.20297790e-01,  9.69546065e-02,  8.03165976e-03,  2.31572866e-01,
        2.80630410e-01,  7.95832798e-02,  2.70528719e-03, -8.67600217e-02,
        1.13381304e-01, -2.24683151e-01,  6.94878772e-02,  1.51006952e-01,
        7.52351508e-02,  3.24642807e-02,  9.69241709e-02, -2.00172380e-01,
       -2.64101010e-03,  9.17152315e-02, -1.39827296e-01,  1.59179736e-02,
        5.34500275e-03, -7.37004504e-02, -4.38221395e-02,  4.50402386e-02,
        2.04327598e-01,  1.04569115e-01, -1.29790261e-01, -5.87400161e-02,
        1.33795023e-01, -2.14853734e-02,  2.50954367e-02,  2.09700093e-02,
       -2.02473983e-01, -2.03982443e-01, -2.26892859e-01,  8.72811303e-02,
        3.77363890e-01,  1.87531725e-01, -2.07815349e-01,  2.02776417e-02,
       -2.02750131e-01,  3.58444862e-02,  7.27951527e-02,  1.16244368e-02,
       -7.08160475e-02, -1.23268642e-01, -4.49334979e-02,  5.42590581e-02,
        6.90868720e-02,  3.30418944e-02, -4.49813604e-02,  2.16862917e-01,
       -2.60124672e-02,  6.64209276e-02,  1.49525572e-02,  5.86308949e-02,
       -1.53352633e-01, -2.24678926e-02, -1.79866180e-01, -7.25785792e-02,
        1.52378716e-02, -2.94895023e-02,  3.72517034e-02,  1.38157442e-01,
       -2.32793584e-01,  7.22975209e-02,  1.25417449e-02, -2.87950430e-02,
        1.83330197e-02,  7.70480335e-02, -2.84826681e-02, -3.26347798e-02,
        6.64828196e-02, -2.42553666e-01,  2.37906665e-01,  2.52437830e-01,
        3.31198014e-02,  1.74926639e-01,  8.09705928e-02,  2.01794934e-02,
       -1.20135071e-02, -3.04520540e-02, -1.82280779e-01, -5.12265079e-02,
        5.12053967e-02,  7.23758861e-02,  7.01159239e-02,  3.94298043e-03],[-3.33886184e-02,  1.83193713e-01,  7.46421441e-02, -1.25666149e-02,
       -1.37468517e-01,  5.38332425e-02, -7.40397125e-02, -7.29681253e-02,
        9.25993919e-02, -1.63999386e-02,  2.06659973e-01, -3.05932742e-02,
       -2.35812426e-01,  3.44168842e-02,  4.00600210e-02,  1.32824108e-01,
       -1.12287924e-01, -7.69962519e-02, -1.97105691e-01, -8.00026134e-02,
       -1.40143875e-02,  4.42480063e-03,  6.31771609e-02, -1.38853071e-02,
       -1.94366306e-01, -2.38617077e-01, -5.12106046e-02, -1.45782232e-01,
       -5.29735908e-02, -1.66108325e-01,  3.49393636e-02, -5.07967733e-02,
       -1.92360148e-01, -6.84249550e-02, -2.39726007e-02, -2.15232410e-02,
       -7.32686743e-02, -8.64579454e-02,  1.56744614e-01,  8.69348645e-04,
       -1.35147348e-01,  9.59918946e-02, -3.72427050e-03,  2.14671150e-01,
        2.24935547e-01,  6.19552610e-03,  6.46690279e-02, -7.58582875e-02,
        1.24124564e-01, -2.04610467e-01,  1.42087704e-02,  6.20617270e-02,
        1.55071884e-01,  7.45123178e-02,  7.96516985e-02, -6.12668879e-02,
        4.99309525e-02,  1.99222073e-01, -1.74687445e-01,  1.20415293e-01,
        3.39880735e-02, -7.64030814e-02,  6.66461606e-03, -5.00324816e-02,
        2.13754565e-01,  1.37248829e-01, -3.45557332e-02, -1.19697310e-01,
        1.84144303e-01, -6.01217374e-02, -1.31189823e-01,  5.78445531e-02,
       -1.24293000e-01, -1.66376561e-01, -3.00912976e-01, -9.63889249e-03,
        3.47450912e-01,  5.98913543e-02, -3.19901019e-01, -1.05865255e-01,
       -4.03923281e-02, -5.11515979e-03, -9.24870186e-03,  6.04766980e-02,
       -4.54358310e-02, -1.43064752e-01, -7.80621469e-02,  8.70761555e-03,
        3.33652198e-01, -1.09768420e-01, -3.87338325e-02,  1.89991698e-01,
        4.42705601e-02, -8.98444057e-02,  2.73302644e-02,  1.68852396e-02,
       -1.11682072e-01, -3.15917693e-02, -1.05557770e-01, -2.70583592e-02,
       -2.49912515e-02, -1.13100044e-01, -9.07623768e-02,  1.09456688e-01,
       -1.86344802e-01,  1.59584701e-01, -1.97762735e-02, -8.13858509e-02,
       -7.99238384e-02,  1.29857240e-02, -3.99479493e-02, -1.63518067e-04,
        2.37322241e-01, -1.99668527e-01,  2.33988672e-01,  2.29260594e-01,
       -2.62182616e-02,  4.91992980e-02, -4.21448052e-02,  8.31629038e-02,
       -2.68035289e-02,  1.04255192e-01, -1.51868597e-01, -1.48808837e-01,
        3.53292897e-02, -2.10434292e-02, -3.68310232e-03,  5.85743003e-02],[-0.12909193,  0.1371408 , -0.0048329 , -0.05553826, -0.04609768,
       -0.04572075, -0.00248115, -0.06133487,  0.18374881, -0.06561068,
        0.14792548,  0.01433917, -0.23189773, -0.10888976, -0.06631151,
        0.11452438, -0.16804238, -0.14023384, -0.11710347, -0.0582971 ,
        0.05665265,  0.06678933,  0.04501363,  0.10245085, -0.09440541,
       -0.3365007 , -0.04389096, -0.13128856, -0.00404086, -0.07775468,
        0.06446412,  0.00046633, -0.14479101, -0.08502456, -0.04444354,
       -0.00396861, -0.02559393, -0.03657678,  0.24557792,  0.00945599,
       -0.17889968, -0.04154312,  0.09841761,  0.37248087,  0.2207752 ,
       -0.00992014, -0.00182888, -0.01430267,  0.17402707, -0.33810923,
        0.14290527,  0.12557127,  0.09362017,  0.04626519,  0.16920459,
       -0.05301249, -0.00658472,  0.16657829, -0.21693355,  0.05722206,
        0.05597472,  0.0452411 , -0.030449  , -0.07484447,  0.21848315,
        0.12235028, -0.12095088, -0.04052328,  0.14544635, -0.1855057 ,
       -0.06422844,  0.01364195, -0.10024592, -0.13641274, -0.34758857,
        0.06531805,  0.40201914,  0.17899507, -0.05292488,  0.04984911,
       -0.07825591, -0.02382159,  0.058254  , -0.01482579, -0.15123659,
       -0.01490951, -0.02618539,  0.09613641,  0.14525922,  0.07979465,
       -0.09549474,  0.22435983,  0.03104317, -0.05848643,  0.06266788,
        0.03469891, -0.04435767, -0.03327917, -0.18697461,  0.089297  ,
        0.04055762, -0.07708015,  0.04546826,  0.0779013 , -0.17528805,
        0.07765289,  0.04670925,  0.0026905 ,  0.0265741 ,  0.07469288,
       -0.22058095, -0.04379337,  0.13419093, -0.18956982,  0.18300197,
        0.06594006,  0.04890692,  0.109425  ,  0.06344175,  0.01241392,
       -0.01000822, -0.04313529, -0.09431562, -0.06296058,  0.13291353,
        0.00716584,  0.11541422,  0.07338598],[-0.13350011, -0.01630563,  0.01705872, -0.04685118, -0.05135363,
       -0.0611475 , -0.00521256, -0.02571419,  0.03567122, -0.03376016,
        0.16799256, -0.00845384, -0.21311358, -0.02659752, -0.03526089,
        0.11699707, -0.10086007, -0.16211325, -0.14786468, -0.05979899,
        0.00766084,  0.03465724, -0.01272995,  0.0968484 , -0.10143025,
       -0.32923496, -0.02947614, -0.10889217,  0.01164745, -0.08057033,
        0.02621246,  0.04432038, -0.16107488, -0.05536313,  0.05454648,
        0.00856773, -0.04957092, -0.08333208,  0.24184845,  0.08767384,
       -0.20749876,  0.06692386,  0.08919106,  0.34288871,  0.16688001,
        0.01739551, -0.01712764, -0.03461727,  0.13898905, -0.31077793,
        0.10331816,  0.14579722,  0.11214414,  0.06042335,  0.14333081,
       -0.11623739,  0.11640815,  0.16256721, -0.24593751,  0.13168304,
        0.00180695, -0.04455581,  0.05663462, -0.05824944,  0.1558037 ,
        0.0500084 , -0.08357371, -0.03105946,  0.17525688, -0.08967134,
       -0.01615658,  0.05689423, -0.10610367, -0.21275982, -0.26754773,
        0.07922588,  0.33896619,  0.23337823, -0.14012982,  0.06741616,
       -0.06898702, -0.01776304,  0.08184013,  0.00435089, -0.10816066,
       -0.08872765, -0.05708214,  0.01750888,  0.15171032,  0.11886503,
       -0.05019222,  0.25486597,  0.01483892, -0.06777833,  0.09208138,
        0.05122261, -0.13662753, -0.06086313, -0.14318214, -0.03960471,
        0.01782557, -0.11762287,  0.06837505,  0.12191227, -0.21534973,
        0.07437459, -0.01900653,  0.00310689,  0.02554813,  0.1034094 ,
       -0.08491275, -0.03963896,  0.04926386, -0.22954693,  0.19747011,
        0.17431912,  0.10225027,  0.0798016 ,  0.07914373, -0.05778804,
       -0.02831354, -0.051576  , -0.15438484, -0.05631702,  0.08583076,
        0.02592852,  0.04975347,  0.08588795]]
        known_face_names = ['Barack Obama', 'Joe Biden', 'hasan', 'yusuf']
        face_locations = []
        face_encodings = []
        face_names = []
        process_this_frame = True

        
        ret, frame = cap.read()
        small_frame = cv2.resize(frame, (0, 0), fx=0.25, fy=0.25)
        rgb_small_frame = small_frame[:, :, ::-1]
        if process_this_frame:
                face_locations = face_recognition.face_locations(rgb_small_frame)
                face_encodings = face_recognition.face_encodings(rgb_small_frame, face_locations)
                face_names = []
                for face_encoding in face_encodings:
                    matches = face_recognition.compare_faces(known_face_encodings, face_encoding)
                    name = "Unknown"
                    face_distances = face_recognition.face_distance(known_face_encodings, face_encoding)
                    best_match_index = np.argmin(face_distances)
                    if matches[best_match_index]:
                        name = known_face_names[best_match_index]
                    face_names.append(name)
        process_this_frame = not process_this_frame
        for (top, right, bottom, left), name in zip(face_locations, face_names):
            top *= 4
            right *= 4
            bottom *= 4
            left *= 4
            cv2.rectangle(frame, (left, top), (right, bottom), (0, 0, 255), 2)
            cv2.rectangle(frame, (left, bottom - 35), (right, bottom), (0, 0, 255), cv2.FILLED)
            font = cv2.FONT_HERSHEY_DUPLEX
            cv2.putText(frame, name, (left + 6, bottom - 6), font, 1.0, (255, 255, 255), 1)
            frame = cv2.imencode('.jpg',frame)[1].tobytes()
            yield (b'--frame\r\n'b'Content-Type: image/jpeg\r\n\r\n' + frame + b'\r\n')
            time.sleep(0.1)
        #cv2.imshow('Video', frame)

        if ret == True:
            img
            
            
        else:
            break
        
            
                
        

    video_capture.release()
    cv2.destroyAllWindows()
                
                    
  

@app.route('/video_feed')
def video_feed():
    """Video streaming route. Put this in the src attribute of an img tag."""
    return Response(gen(),
                    mimetype='multipart/x-mixed-replace; boundary=frame')


if __name__ == "__main__":
    app.run()
    

